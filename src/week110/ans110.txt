//--------------------------------------------------
//calc.lex
//--------------------------------------------------
%%
"+" return ADD;
"-" return SUB;
"*" return MUL;
"/" return DIV;
"%" return MOD;  //課題10-2
"^" return POW;  //課題10-3
"(" return LP;
")" return RP;
"\n" return NL;

[0-9]+ {
  yylval = atoi(yytext);
  return NUMBER;
}
%%

//--------------------------------------------------
//calc.yacc
//--------------------------------------------------
%token NL LP RP NUMBER
%token ADD SUB MUL DIV MOD POW //課題10-2でMOD, 課題10-3でPOWを追加
%%
list : 
     | list expr NL { printf("%d\n", $2);}
     ;
expr : expr ADD expr { $$ = $1 + $3;}
     | expr SUB expr { $$ = $1 - $3;}
     | expr MUL expr { $$ = $1 * $3;}     //課題10-1
     | expr DIV expr { $$ = $1 / $3;}     //課題10-1
     | expr MOD expr { $$ = $1 % $3;}     //課題10-2
     | expr POW expr { $$ = pow($1, $3);} //課題10-3
     | LP expr RP    { $$ = $2;}
     | NUMBER        { $$ = $1;}
     ;
%%
#include <math.h>   //課題10-3
#include "lex.yy.c"

//--------------------------------------------------
//calc_zenchi.yacc
//（課題10-4, lexファイルは変更なし）
//--------------------------------------------------
%token NL LP RP NUMBER
%token ADD SUB MUL DIV MOD POW
%%
list : 
     | list expr NL { printf("%d\n", $2);}
     ;
expr : ADD expr expr { $$ = $2 + $3;}     //演算子を前にして$1を$2に変更する
     | SUB expr expr { $$ = $2 - $3;}     //同様
     | MUL expr expr { $$ = $2 * $3;}     //同様
     | DIV expr expr { $$ = $2 / $3;}     //同様
     | MOD expr expr { $$ = $2 % $3;}     //同様
     | POW expr expr { $$ = pow($2, $3);} //同様
     | LP expr RP    { $$ = $2;}
     | NUMBER        { $$ = $1;}
     ;
%%
#include <math.h>
#include "lex.yy.c"
